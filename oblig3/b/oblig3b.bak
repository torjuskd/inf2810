;;Oblig3b
;;Gruppe: Anders Jakob Sivesind og Torjus Dahle.
(require r5rs)
(load "evaluator.scm")
;;(1 : Bli kjent med evaluatoren)
;;(1a)
(set! the-global-environment (setup-environment))

(define tekst '(define (foo cond else)
                   (cond ((= cond 2) 0)
                         (else (else cond)))))
(mc-eval tekst the-global-environment)
(mc-eval '(define cond 3) the-global-environment)
(mc-eval '(define (else x)(/ x 2)) the-global-environment)
(mc-eval '(define (square x) (* x x)) the-global-environment)

;; sÃ¥ teste:
(mc-eval '(foo 2 square) the-global-environment)
;;=> 0
;;Grunnen til at vi fÃ¥r returnert 0 her er at evaluatoren evaluerer
;;cond til forskjellige ting underveis i uttrykket.
;;cond vil fÃ¸rst evalueres til special formen cond, og deretter
;;evalueres til 2.
;;Det samme skjer med else; den fÃ¸rste elsen som evalueres
;;evaluerer til "den egentlige" else, mens de pÃ¥fÃ¸lgende
;;vil evaluere til prosedyren else er bundet til, nemlig square.

;;Vi fÃ¥r altsÃ¥:
;;(cond ((= 2 2) 0)
;;      (else (square 2)))

(mc-eval '(foo 4 square) the-global-environment)
;;=> 16
;;Det samme skjer som i tilfellet over, men her slÃ¥r else-tilfellet til isteden.
;;(cond ((= 4 2) 0)
;;      (else (square 4)))

(mc-eval '(cond ((= cond 2) 0)
                  (else (else 4))) the-global-environment)
;;=> 2
;;Her "settes" den omdefinerte else inn for den ene av dem.
;;Utrykket som evalueres blir:
;;(cond ((= 3 2) 0)
;;      (else ((lambda (x) (/ x 2)) 4)))

;;(2 : Primitiver / innebygde prosedyrer)
;;(2a)
;; <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Må gjøres primitive! >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;; (mc-eval '(define (1+ n)
;;            (+ n 1)) the-global-environment)
;; (mc-eval '(define (1- n)
;;             (- n 1)) the-global-environment)

(define primitive-procedures
  (list (list 'car car)
        (list 'cdr cdr)
        (list 'cons cons)
        (list 'null? null?)
        (list 'not not)
        (list '+ +)
        (list '- -)
        (list '* *)
        (list '/ /)
        (list '= =)
        (list 'eq? eq?)
        (list 'equal? equal?)
        (list 'display 
              (lambda (x) (display x) 'ok))
        (list 'newline 
              (lambda () (newline) 'ok))
	(list '1+
	      (lambda (n) (+ n 1)))
	(list '1-
	  (lambda (n) (- n 1)))
	;;      her kan vi legge til flere primitiver.
        ))

;;(2b)
(define (install-primitive! name proc)
  (define (iter primitive-procedures)
    (if (null? (cdr primitive-procedures))
	(set-cdr! primitive-procedures (cons (list name proc) '()))
	(iter (cdr  primitive-procedures))))
  (iter primitive-procedures))
  
(install-primitive! 'asdf (lambda () 5))
primitive-procedures
(mc-eval 'asdf the-global-environment)
(mc-eval '(asdf) the-global-environment)
;;(read-eval-print-loop)
(mc-eval '(1+ 5) the-global-environment)
